import argparse
import TIC.utils.serve as serve
import csv
import os
import shutil
import torch

def copy_image(image_path, label, output_directory):
    new_path = os.path.join(output_directory, label, os.path.basename(image_path))
    os.makedirs(os.path.dirname(new_path), exist_ok=True)
    shutil.copy(image_path, new_path)

'''
Given a csv file generated by serve.py full judge,
filter out the images that are correctly predicted
'''
def filter(csv_file, output_directory):
    tot = 0
    cnt = 0
    with open(csv_file, 'r') as f:
        reader = csv.DictReader(f)
        for row in reader:
            tot += 1
            if row['predicted_class'].strip() == row['actual_class'].strip():
                cnt += 1
                copy_image(row['path'].strip(), row['actual_class'].strip(), output_directory)
    print(f"Tot:{tot}, Copy cnt:{cnt}, Rate:{cnt/tot}")


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Filter images by predictions')
    parser.add_argument('--csv-file', type=str, help='Path to the CSV file, if model provided, file will be regenerated.')
    parser.add_argument('--output-directory', '-od', type=str, required=True, help='Path to the output directory')
    parser.add_argument('--model', type=str, default = None, choices=['resnet', 'vit-base', 'vit-large'], help='Type of model to load (resnet/vit).')
    parser.add_argument('--weights', type=str, default=None, help='Path to model weights file.')
    parser.add_argument('--device', type=str, default='cuda' if torch.cuda.is_available() else 'cpu', help='Device to load the model onto (cuda or cpu).')
    parser.add_argument('--image', type=str, required=True, help='Data folder to filter')

    args = parser.parse_args()
    if args.model:
        args.full = True
        model, transforms, class_to_idx = serve.init(args)
        if args.csv_file:
            args.output = args.csv_file
        else:
            args.output = "filter_temp.csv"
        serve.full_judge(model, transforms, class_to_idx, args)
        filter(args.output, args.output_directory)
        if not args.csv_file:
            os.remove(args.output)
    elif args.csv_file:
        filter(args.csv_file, args.output_directory)
    else:
        print("Please provide either --model or --csv-file")
        exit(1)
